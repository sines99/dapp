{"version":3,"sources":["meteor://ðŸ’»app/packages/vsivsi_job-collection/job/src/job_class.coffee","meteor://ðŸ’»app/packages/vsivsi_job-collection/src/shared.coffee","meteor://ðŸ’»app/packages/vsivsi_job-collection/src/server.coffee"],"names":[],"mappings":"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","file":"/packages/vsivsi_job-collection.js","sourcesContent":["############################################################################\n#     Copyright (C) 2014-2016 by Vaughn Iverson\n#     meteor-job-class is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\n# Exports Job object\n\nmethodCall = (root, method, params, cb, after = ((ret) -> ret)) ->\n  apply = Job._ddp_apply?[root.root ? root] ? Job._ddp_apply\n  unless typeof apply is 'function'\n     throw new Error \"Job remote method call error, no valid invocation method found.\"\n  name = \"#{root.root ? root}_#{method}\"\n  if cb and typeof cb is 'function'\n    apply name, params, (err, res) =>\n      return cb err if err\n      cb null, after(res)\n  else\n    return after(apply name, params)\n\noptionsHelp = (options, cb) ->\n  # If cb isn't a function, it's assumed to be options...\n  if cb? and typeof cb isnt 'function'\n    options = cb\n    cb = undefined\n  else\n    unless (typeof options is 'object' and\n            options instanceof Array and\n            options.length < 2)\n      throw new Error 'options... in optionsHelp must be an Array with zero or one elements'\n    options = options?[0] ? {}\n  unless typeof options is 'object'\n    throw new Error 'in optionsHelp options not an object or bad callback'\n  return [options, cb]\n\nsplitLongArray = (arr, max) ->\n  throw new Error 'splitLongArray: bad params' unless arr instanceof Array and max > 0\n  arr[(i*max)...((i+1)*max)] for i in [0...Math.ceil(arr.length/max)]\n\n# This function soaks up num callbacks, by default returning the disjunction of Boolean results\n# or returning on first error.... Reduce function causes different reduce behavior, such as concatenation\nreduceCallbacks = (cb, num, reduce = ((a , b) -> (a or b)), init = false) ->\n  return undefined unless cb?\n  unless typeof cb is 'function' and num > 0 and typeof reduce is 'function'\n    throw new Error 'Bad params given to reduceCallbacks'\n  cbRetVal = init\n  cbCount = 0\n  cbErr = null\n  return (err, res) ->\n    unless cbErr\n      if err\n        cbErr = err\n        cb err\n      else\n        cbCount++\n        cbRetVal = reduce cbRetVal, res\n        if cbCount is num\n          cb null, cbRetVal\n        else if cbCount > num\n          throw new Error \"reduceCallbacks callback invoked more than requested #{num} times\"\n\nconcatReduce = (a, b) ->\n  a = [a] unless a instanceof Array\n  a.concat b\n\nisInteger = (i) -> typeof i is 'number' and Math.floor(i) is i\n\nisBoolean = (b) -> typeof b is 'boolean'\n\n# This smooths over the various different implementations...\n_setImmediate = (func, args...) ->\n  if Meteor?.setTimeout?\n    return Meteor.setTimeout func, 0, args...\n  else if setImmediate?\n    return setImmediate func, args...\n  else\n    # Browser fallback\n    return setTimeout func, 0, args...\n\n_setInterval = (func, timeOut, args...) ->\n  if Meteor?.setInterval?\n    return Meteor.setInterval func, timeOut, args...\n  else\n    # Browser / node.js fallback\n    return setInterval func, timeOut, args...\n\n_clearInterval = (id) ->\n  if Meteor?.clearInterval?\n    return Meteor.clearInterval id\n  else\n    # Browser / node.js fallback\n    return clearInterval id\n\n###################################################################\n\nclass JobQueue\n\n  constructor: (@root, @type, options..., @worker) ->\n    unless @ instanceof JobQueue\n      return new JobQueue @root, @type, options..., @worker\n    [options, @worker] = optionsHelp options, @worker\n\n    @pollInterval =\n      if options.pollInterval? and not options.pollInterval\n        Job.forever\n      else if not (options.pollInterval? and isInteger(options.pollInterval))\n        5000  # ms\n      else\n        options.pollInterval\n    unless isInteger(@pollInterval) and @pollInterval >= 0\n      throw new Error \"JobQueue: Invalid pollInterval, must be a positive integer\"\n\n    @concurrency = options.concurrency ? 1\n    unless isInteger(@concurrency) and @concurrency >= 0\n      throw new Error \"JobQueue: Invalid concurrency, must be a positive integer\"\n\n    @payload = options.payload ? 1\n    unless isInteger(@payload) and @payload >= 0\n      throw new Error \"JobQueue: Invalid payload, must be a positive integer\"\n\n    @prefetch = options.prefetch ? 0\n    unless isInteger(@prefetch) and @prefetch >= 0\n      throw new Error \"JobQueue: Invalid prefetch, must be a positive integer\"\n\n    @workTimeout = options.workTimeout  # No default\n    if @workTimeout? and not (isInteger(@workTimeout) and @workTimeout >= 0)\n      throw new Error \"JobQueue: Invalid workTimeout, must be a positive integer\"\n\n    @callbackStrict = options.callbackStrict\n    if @callbackStrict? and not isBoolean(@callbackStrict)\n      throw new Error \"JobQueue: Invalid callbackStrict, must be a boolean\"\n\n    @_workers = {}\n    @_tasks = []\n    @_taskNumber = 0\n    @_stoppingGetWork = undefined\n    @_stoppingTasks = undefined\n    @_interval = null\n    @_getWorkOutstanding = false\n    @paused = true\n    @resume()\n\n  _getWork: () ->\n    # Don't reenter, or run when paused or stopping\n    unless @_getWorkOutstanding or @paused\n      numJobsToGet = @prefetch + @payload*(@concurrency - @running()) - @length()\n      if numJobsToGet > 0\n        @_getWorkOutstanding = true\n        options = { maxJobs: numJobsToGet }\n        options.workTimeout = @workTimeout if @workTimeout?\n        Job.getWork @root, @type, options, (err, jobs) =>\n          @_getWorkOutstanding = false\n          if err\n            console.error \"JobQueue: Received error from getWork(): \", err\n          else if jobs? and jobs instanceof Array\n            if jobs.length > numJobsToGet\n              console.error \"JobQueue: getWork() returned jobs (#{jobs.length}) in excess of maxJobs (#{numJobsToGet})\"\n            for j in jobs\n              @_tasks.push j\n              _setImmediate @_process.bind(@) unless @_stoppingGetWork?\n            @_stoppingGetWork() if @_stoppingGetWork?\n          else\n            console.error \"JobQueue: Nonarray response from server from getWork()\"\n\n  _only_once: (fn) ->\n    called = false\n    return () =>\n      if called\n        console.error \"Worker callback called multiple times in JobQueue\"\n        if @callbackStrict\n          throw new Error \"JobQueue worker callback was invoked multiple times\"\n      called = true\n      fn.apply @, arguments\n\n  _process: () ->\n    if not @paused and @running() < @concurrency and @length()\n      if @payload > 1\n        job = @_tasks.splice 0, @payload\n      else\n        job = @_tasks.shift()\n      job._taskId = \"Task_#{@_taskNumber++}\"\n      @_workers[job._taskId] = job\n      next = () =>\n        delete @_workers[job._taskId]\n        if @_stoppingTasks? and @running() is 0 and @length() is 0\n          @_stoppingTasks()\n        else\n          _setImmediate @_process.bind(@)\n          _setImmediate @_getWork.bind(@)\n      cb = @_only_once next\n      @worker job, cb\n\n  _stopGetWork: (callback) ->\n    _clearInterval @_interval\n    @_interval = null\n    if @_getWorkOutstanding\n      @_stoppingGetWork = callback\n    else\n      _setImmediate callback  # No Zalgo, thanks\n\n  _waitForTasks: (callback) ->\n    unless @running() is 0\n      @_stoppingTasks = callback\n    else\n      _setImmediate callback  # No Zalgo, thanks\n\n  _failJobs: (tasks, callback) ->\n    _setImmediate callback if tasks.length is 0  # No Zalgo, thanks\n    count = 0\n    for job in tasks\n      job.fail \"Worker shutdown\", (err, res) =>\n        count++\n        if count is tasks.length\n          callback()\n\n  _hard: (callback) ->\n    @paused = true\n    @_stopGetWork () =>\n      tasks = @_tasks\n      @_tasks = []\n      for i, r of @_workers\n        tasks = tasks.concat r\n      @_failJobs tasks, callback\n\n  _stop: (callback) ->\n    @paused = true\n    @_stopGetWork () =>\n      tasks = @_tasks\n      @_tasks = []\n      @_waitForTasks () =>\n        @_failJobs tasks, callback\n\n  _soft: (callback) ->\n    @_stopGetWork () =>\n      @_waitForTasks callback\n\n  length: () -> @_tasks.length\n\n  running: () -> Object.keys(@_workers).length\n\n  idle: () -> @length() + @running() is 0\n\n  full: () -> @running() is @concurrency\n\n  pause: () ->\n    return if @paused\n    unless @pollInterval >= Job.forever\n      _clearInterval @_interval\n      @_interval = null\n    @paused = true\n    @\n\n  resume: () ->\n    return unless @paused\n    @paused = false\n    _setImmediate @_getWork.bind(@)\n    unless @pollInterval >= Job.forever\n      @_interval = _setInterval @_getWork.bind(@), @pollInterval\n    for w in [1..@concurrency]\n      _setImmediate @_process.bind(@)\n    @\n\n  trigger: () ->\n    return if @paused\n    _setImmediate @_getWork.bind(@)\n    @\n\n  shutdown: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.level ?= 'normal'\n    options.quiet ?= false\n    unless cb?\n      console.warn \"using default shutdown callback!\" unless options.quiet\n      cb = () =>\n        console.warn \"Shutdown complete\"\n    switch options.level\n      when 'hard'\n        console.warn \"Shutting down hard\" unless options.quiet\n        @_hard cb\n      when 'soft'\n        console.warn \"Shutting down soft\" unless options.quiet\n        @_soft cb\n      else\n        console.warn \"Shutting down normally\" unless options.quiet\n        @_stop cb\n\n###################################################################\n\nclass Job\n\n  # This is the JS max int value = 2^53\n  @forever = 9007199254740992\n\n  # This is the maximum date value in JS\n  @foreverDate = new Date 8640000000000000\n\n  @jobPriorities:\n    low: 10\n    normal: 0\n    medium: -5\n    high: -10\n    critical: -15\n\n  @jobRetryBackoffMethods: [ 'constant', 'exponential' ]\n\n  @jobStatuses: [ 'waiting', 'paused', 'ready', 'running'\n                  'failed', 'cancelled', 'completed' ]\n\n  @jobLogLevels: [ 'info', 'success', 'warning', 'danger' ]\n\n  @jobStatusCancellable: [ 'running', 'ready', 'waiting', 'paused' ]\n  @jobStatusPausable: [ 'ready', 'waiting' ]\n  @jobStatusRemovable:   [ 'cancelled', 'completed', 'failed' ]\n  @jobStatusRestartable: [ 'cancelled', 'failed' ]\n\n  @ddpMethods = [ 'startJobs', 'stopJobs',  # Deprecated!\n                  'startJobServer', 'shutdownJobServer',\n                  'jobRemove', 'jobPause', 'jobResume', 'jobReady'\n                  'jobCancel', 'jobRestart', 'jobSave', 'jobRerun', 'getWork'\n                  'getJob', 'jobLog', 'jobProgress', 'jobDone', 'jobFail' ]\n\n  @ddpPermissionLevels = [ 'admin', 'manager', 'creator', 'worker' ]\n\n  # These are the four levels of the allow/deny permission heirarchy\n  @ddpMethodPermissions =\n    'startJobs': ['startJobs', 'admin']  # Deprecated!\n    'stopJobs': ['stopJobs', 'admin']    # Deprecated!\n    'startJobServer': ['startJobServer', 'admin']\n    'shutdownJobServer': ['shutdownJobServer', 'admin']\n    'jobRemove': ['jobRemove', 'admin', 'manager']\n    'jobPause': ['jobPause', 'admin', 'manager']\n    'jobResume': ['jobResume', 'admin', 'manager']\n    'jobCancel': ['jobCancel', 'admin', 'manager']\n    'jobReady': ['jobReady', 'admin', 'manager']\n    'jobRestart': ['jobRestart', 'admin', 'manager']\n    'jobSave': ['jobSave', 'admin', 'creator']\n    'jobRerun': ['jobRerun', 'admin', 'creator']\n    'getWork': ['getWork', 'admin', 'worker']\n    'getJob': ['getJob', 'admin', 'worker']\n    'jobLog': [ 'jobLog', 'admin', 'worker']\n    'jobProgress': ['jobProgress', 'admin', 'worker']\n    'jobDone': ['jobDone', 'admin', 'worker']\n    'jobFail': ['jobFail', 'admin', 'worker']\n\n  # Automatically work within Meteor, otherwise see @setDDP below\n  @_ddp_apply: undefined\n\n  # Class methods\n\n  @_setDDPApply: (apply, collectionName) ->\n    if typeof apply is 'function'\n      if typeof collectionName is 'string'\n         @_ddp_apply ?= {}\n         if typeof @_ddp_apply is 'function'\n            throw new Error \"Job.setDDP must specify a collection name each time if called more than once.\"\n         @_ddp_apply[collectionName] = apply\n      else unless @_ddp_apply\n         @_ddp_apply = apply\n      else\n         throw new Error \"Job.setDDP must specify a collection name each time if called more than once.\"\n    else\n      throw new Error \"Bad function in Job.setDDPApply()\"\n\n  # This needs to be called when not running in Meteor to use the local DDP connection.\n  @setDDP: (ddp = null, collectionNames = null, Fiber = null) ->\n    unless (typeof collectionNames is 'string') or (collectionNames instanceof Array)\n      # Handle optional collection string with Fiber present\n      Fiber = collectionNames\n      collectionNames = [ undefined ]\n    else if typeof collectionNames is 'string'\n      # If string, convert to array of strings\n      collectionNames = [ collectionNames ]\n    for collName in collectionNames\n      unless ddp? and ddp.close? and ddp.subscribe?\n        # Not the DDP npm package\n        if ddp is null and Meteor?.apply?\n          # Meteor local server/client\n          @_setDDPApply Meteor.apply, collName\n        else\n          # No other possibilities...\n          throw new Error \"Bad ddp object in Job.setDDP()\"\n      else unless ddp.observe?  # This is a Meteor DDP connection object\n        @_setDDPApply ddp.apply.bind(ddp), collName\n      else # This is the npm DDP package\n        unless Fiber?\n          @_setDDPApply ddp.call.bind(ddp), collName\n        else\n          # If Fibers in use under pure node.js,\n          # make sure to yield and throw errors when no callback\n          @_setDDPApply(((name, params, cb) ->\n            fib = Fiber.current\n            ddp.call name, params, (err, res) ->\n              if cb? and typeof cb is 'function'\n                cb err, res\n              else\n                if err\n                  fib.throwInto err\n                else\n                  fib.run res\n            if cb? and typeof cb is 'function'\n              return\n            else\n              return Fiber.yield()\n          ), collName)\n\n  # Creates a job object by reserving the next available job of\n  # the specified 'type' from the server queue root\n  # returns null if no such job exists\n  @getWork: (root, type, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    type = [type] if typeof type is 'string'\n    if options.workTimeout?\n      unless isInteger(options.workTimeout) and options.workTimeout > 0\n        throw new Error 'getWork: workTimeout must be a positive integer'\n    methodCall root, \"getWork\", [type, options], cb, (res) =>\n      jobs = (new Job(root, doc) for doc in res) or []\n      if options.maxJobs?\n        return jobs\n      else\n        return jobs[0]\n\n  # This is defined above\n  @processJobs: JobQueue\n\n  # Makes a job object from a job document\n  # This method is deprecated and will be removed\n  @makeJob: do () ->\n    depFlag = false\n    (root, doc) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Job.makeJob(root, jobDoc) has been deprecated and will be removed in a future release, use 'new Job(root, jobDoc)' instead.\"\n      new Job root, doc\n\n  # Creates a job object by id from the server queue root\n  # returns null if no such job exists\n  @getJob: (root, id, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    methodCall root, \"getJob\", [id, options], cb, (doc) =>\n      if doc\n        new Job root, doc\n      else\n        undefined\n\n  # Like the above, but takes an array of ids, returns array of jobs\n  @getJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    retVal = []\n    chunksOfIds = splitLongArray ids, 32\n    myCb = reduceCallbacks(cb, chunksOfIds.length, concatReduce, [])\n    for chunkOfIds in chunksOfIds\n      retVal = retVal.concat(methodCall root, \"getJob\", [chunkOfIds, options], myCb, (doc) =>\n        if doc\n          (new Job(root, d.type, d.data, d) for d in doc)\n        else\n          null)\n    return retVal\n\n  # Pause this job, only Ready and Waiting jobs can be paused\n  # Calling this toggles the paused state. Unpaused jobs go to waiting\n  @pauseJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobPause\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Resume this job, only Paused jobs can be resumed\n  # Calling this toggles the paused state. Unpaused jobs go to waiting\n  @resumeJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobResume\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Move waiting jobs to the ready state, jobs with dependencies will not\n  # be made ready unless force is used.\n  @readyJobs: (root, ids = [], options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.force ?= false\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    chunksOfIds = [[]] unless chunksOfIds.length > 0\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobReady\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Cancel this job if it is running or able to run (waiting, ready)\n  @cancelJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.antecedents ?= true\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobCancel\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Restart a failed or cancelled job\n  @restartJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.retries ?= 1\n    options.dependents ?= true\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobRestart\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Remove a job that is not able to run (completed, cancelled, failed) from the queue\n  @removeJobs: (root, ids, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    retVal = false\n    chunksOfIds = splitLongArray ids, 256\n    myCb = reduceCallbacks(cb, chunksOfIds.length)\n    for chunkOfIds in chunksOfIds\n      retVal = methodCall(root, \"jobRemove\", [chunkOfIds, options], myCb) || retVal\n    return retVal\n\n  # Start the job queue\n  # Deprecated!\n  @startJobs: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    methodCall root, \"startJobs\", [options], cb\n\n  # Stop the job queue, stop all running jobs\n  # Deprecated!\n  @stopJobs: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.timeout ?= 60*1000\n    methodCall root, \"stopJobs\", [options], cb\n\n  # Start the job queue\n  @startJobServer: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    methodCall root, \"startJobServer\", [options], cb\n\n  # Shutdown the job queue, stop all running jobs\n  @shutdownJobServer: (root, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.timeout ?= 60*1000\n    methodCall root, \"shutdownJobServer\", [options], cb\n\n  # Job class instance constructor. When \"new Job(...)\" is run\n  constructor: (@root, type, data) ->\n    unless @ instanceof Job\n      return new Job @root, type, data\n\n    # Keep the original root, whatever type that is\n    @_root = @root\n\n    # Handle root as object with obj.root attribute\n    if @root?.root? and typeof @root.root is 'string'\n      @root = @_root.root\n\n    # Handle (root, doc) signature\n    if not data? and type?.data? and type?.type?\n      if type instanceof Job\n        return type\n\n      doc = type\n      data = doc.data\n      type = doc.type\n    else\n      doc = {}\n\n    unless typeof doc is 'object' and\n           typeof data is 'object' and\n           typeof type is 'string' and\n           typeof @root is 'string'\n      throw new Error \"new Job: bad parameter(s), #{@root} (#{typeof @root}), #{type} (#{typeof type}), #{data} (#{typeof data}), #{doc} (#{typeof doc})\"\n\n    else if doc.type? and doc.data? # This case is used to create local Job objects from DDP calls\n      @_doc = doc\n\n    else  # This is the normal \"create a new object\" case\n      time = new Date()\n      @_doc =\n        runId: null\n        type : type\n        data: data\n        status: 'waiting'\n        updated: time\n        created: time\n      @priority().retry().repeat().after().progress().depends().log(\"Constructed\")\n\n    return @\n\n  # Override point for methods that have an echo option\n  _echo: (message, level = null) ->\n    switch level\n      when 'danger' then console.error message\n      when 'warning' then console.warn message\n      when 'success' then console.log message\n      else console.info message\n    return\n\n  # Adds a run dependancy on one or more existing jobs to this job\n  # Calling with a falsy value resets the dependencies to []\n  depends: (jobs) ->\n    if jobs\n      if jobs instanceof Job\n        jobs = [ jobs ]\n      if jobs instanceof Array\n        depends = @_doc.depends\n        for j in jobs\n          unless j instanceof Job and j._doc._id?\n            throw new Error 'Each provided object must be a saved Job instance (with an _id)'\n          depends.push j._doc._id\n      else\n        throw new Error 'Bad input parameter: depends() accepts a falsy value, or Job or array of Jobs'\n    else\n      depends = []\n    @_doc.depends = depends\n    @_doc.resolved = []  # This is where prior depends go as they are satisfied\n    return @\n\n  # Set the run priority of this job\n  priority: (level = 0) ->\n    if typeof level is 'string'\n      priority = Job.jobPriorities[level]\n      unless priority?\n        throw new Error 'Invalid string priority level provided'\n    else if isInteger(level)\n      priority = level\n    else\n      throw new Error 'priority must be an integer or valid priority level'\n      priority = 0\n    @_doc.priority = priority\n    return @\n\n  # Sets the number of attempted runs of this job and\n  # the time to wait between successive attempts\n  # Default, do not retry\n  retry: (options = 0) ->\n    if isInteger(options) and options >= 0\n      options = { retries: options }\n    if typeof options isnt 'object'\n      throw new Error 'bad parameter: accepts either an integer >= 0 or an options object'\n    if options.retries?\n      unless isInteger(options.retries) and options.retries >= 0\n        throw new Error 'bad option: retries must be an integer >= 0'\n      options.retries++\n    else\n      options.retries = Job.forever\n    if options.until?\n      unless options.until instanceof Date\n        throw new Error 'bad option: until must be a Date object'\n    else\n      options.until = Job.foreverDate\n    if options.wait?\n      unless isInteger(options.wait) and options.wait >= 0\n        throw new Error 'bad option: wait must be an integer >= 0'\n    else\n      options.wait = 5*60*1000\n    if options.backoff?\n      unless options.backoff in Job.jobRetryBackoffMethods\n        throw new Error 'bad option: invalid retry backoff method'\n    else\n      options.backoff = 'constant'\n\n    @_doc.retries = options.retries\n    @_doc.repeatRetries = options.retries\n    @_doc.retryWait = options.wait\n    @_doc.retried ?= 0\n    @_doc.retryBackoff = options.backoff\n    @_doc.retryUntil = options.until\n    return @\n\n  # Sets the number of times to repeatedly run this job\n  # and the time to wait between successive runs\n  # Default: repeat every 5 minutes, forever...\n  repeat: (options = 0) ->\n    if isInteger(options) and options >= 0\n      options = { repeats: options }\n    if typeof options isnt 'object'\n      throw new Error 'bad parameter: accepts either an integer >= 0 or an options object'\n    if options.wait? and options.schedule?\n      throw new Error 'bad options: wait and schedule options are mutually exclusive'\n    if options.repeats?\n      unless isInteger(options.repeats) and options.repeats >= 0\n        throw new Error 'bad option: repeats must be an integer >= 0'\n    else\n      options.repeats = Job.forever\n    if options.until?\n      unless options.until instanceof Date\n        throw new Error 'bad option: until must be a Date object'\n    else\n      options.until = Job.foreverDate\n    if options.wait?\n      unless isInteger(options.wait) and options.wait >= 0\n        throw new Error 'bad option: wait must be an integer >= 0'\n    else\n      options.wait = 5*60*1000\n    if options.schedule?\n      unless typeof options.schedule is 'object'\n        throw new Error 'bad option, schedule option must be an object'\n      unless options.schedule?.schedules? and options.schedule.schedules instanceof Array\n        throw new Error 'bad option, schedule object requires a schedules attribute of type Array.'\n      if options.schedule.exceptions? and not (options.schedule.exceptions instanceof Array)\n        throw new Error 'bad option, schedule object exceptions attribute must be an Array'\n      options.wait =\n        schedules: options.schedule.schedules\n        exceptions: options.schedule.exceptions\n\n    @_doc.repeats = options.repeats\n    @_doc.repeatWait = options.wait\n    @_doc.repeated ?= 0\n    @_doc.repeatUntil = options.until\n    return @\n\n  # Sets the delay before this job can run after it is saved\n  delay: (wait = 0) ->\n    unless isInteger(wait) and wait >= 0\n      throw new Error 'Bad parameter, delay requires a non-negative integer.'\n    return @after new Date(new Date().valueOf() + wait)\n\n  # Sets a time after which this job can run once it is saved\n  after: (time = new Date(0)) ->\n    if typeof time is 'object' and time instanceof Date\n      after = time\n    else\n      throw new Error 'Bad parameter, after requires a valid Date object'\n    @_doc.after = after\n    return @\n\n  # Write a message to this job's log.\n  log: (message, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.level ?= 'info'\n    unless typeof message is 'string'\n      throw new Error 'Log message must be a string'\n    unless typeof options.level is 'string' and options.level in Job.jobLogLevels\n      throw new Error 'Log level options must be one of Job.jobLogLevels'\n    if options.echo?\n      if options.echo and Job.jobLogLevels.indexOf(options.level) >= Job.jobLogLevels.indexOf(options.echo)\n        @_echo \"LOG: #{options.level}, #{@_doc._id} #{@_doc.runId}: #{message}\", options.level\n      delete options.echo\n    if @_doc._id?\n      return methodCall @_root, \"jobLog\", [@_doc._id, @_doc.runId, message, options], cb\n    else  # Log can be called on an unsaved job\n      @_doc.log ?= []\n      @_doc.log.push { time: new Date(), runId: null, level: options.level, message: message }\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true   # DO NOT release Zalgo\n      return @  # Allow call chaining in this case\n\n  # Indicate progress made for a running job. This is important for\n  # long running jobs so the scheduler doesn't assume they are dead\n  progress: (completed = 0, total = 1, options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if (typeof completed is 'number' and\n        typeof total is 'number' and\n        completed >= 0 and\n        total > 0 and\n        total >= completed)\n      progress =\n        completed: completed\n        total: total\n        percent: 100*completed/total\n      if options.echo\n        delete options.echo\n        @_echo \"PROGRESS: #{@_doc._id} #{@_doc.runId}: #{progress.completed} out of #{progress.total} (#{progress.percent}%)\"\n      if @_doc._id? and @_doc.runId?\n        return methodCall @_root, \"jobProgress\", [@_doc._id, @_doc.runId, completed, total, options], cb, (res) =>\n          if res\n            @_doc.progress = progress\n          res\n      else unless @_doc._id?\n        @_doc.progress = progress\n        if cb? and typeof cb is 'function'\n          _setImmediate cb, null, true   # DO NOT release Zalgo\n        return @\n    else\n      throw new Error \"job.progress: something is wrong with progress params: #{@id}, #{completed} out of #{total}\"\n    return null\n\n  # Save this job to the server job queue Collection it will also resave a modified job if the\n  # job is not running and hasn't completed.\n  save: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    return methodCall @_root, \"jobSave\", [@_doc, options], cb, (id) =>\n      if id\n        @_doc._id = id\n      id\n\n  # Refresh the local job state with the server job queue's version\n  refresh: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.getLog ?= false\n    if @_doc._id?\n      return methodCall @_root, \"getJob\", [@_doc._id, options], cb, (doc) =>\n        if doc?\n          @_doc = doc\n          @\n        else\n          false\n    else\n      throw new Error \"Can't call .refresh() on an unsaved job\"\n\n  # Indicate to the server that this run has successfully finished.\n  done: (result = {}, options..., cb) ->\n    if typeof result is 'function'\n      cb = result\n      result = {}\n    [options, cb] = optionsHelp options, cb\n    unless result? and typeof result is 'object'\n      result = { value: result }\n    if @_doc._id? and @_doc.runId?\n      return methodCall @_root, \"jobDone\", [@_doc._id, @_doc.runId, result, options], cb\n    else\n      throw new Error \"Can't call .done() on an unsaved or non-running job\"\n    return null\n\n  # Indicate to the server that this run has failed and provide an error message.\n  fail: (result = \"No error information provided\", options..., cb) ->\n    if typeof result is 'function'\n      cb = result\n      result = \"No error information provided\"\n    [options, cb] = optionsHelp options, cb\n    unless result? and typeof result is 'object'\n      result = { value: result }\n    options.fatal ?= false\n    if @_doc._id? and @_doc.runId?\n      return methodCall @_root, \"jobFail\", [@_doc._id, @_doc.runId, result, options], cb\n    else\n      throw new Error \"Can't call .fail() on an unsaved or non-running job\"\n    return null\n\n  # Pause this job, only Ready and Waiting jobs can be paused\n  pause: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobPause\", [@_doc._id, options], cb\n    else\n      @_doc.status = 'paused'\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true  # DO NOT release Zalgo\n      return @\n    return null\n\n  # Resume this job, only Paused jobs can be resumed\n  # Resumed jobs go to waiting\n  resume: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobResume\", [@_doc._id, options], cb\n    else\n      @_doc.status = 'waiting'\n      if cb? and typeof cb is 'function'\n        _setImmediate cb, null, true  # DO NOT release Zalgo\n      return @\n    return null\n\n  # Make a waiting job ready to run. Jobs with dependencies only when forced\n  ready: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.force ?= false\n    if @_doc._id?\n      return methodCall @_root, \"jobReady\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .ready() on an unsaved job\"\n    return null\n\n  # Cancel this job if it is running or able to run (waiting, ready)\n  cancel: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.antecedents ?= true\n    if @_doc._id?\n      return methodCall @_root, \"jobCancel\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .cancel() on an unsaved job\"\n    return null\n\n  # Restart a failed or cancelled job\n  restart: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.retries ?= 1\n    options.dependents ?= true\n    if @_doc._id?\n      return methodCall @_root, \"jobRestart\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .restart() on an unsaved job\"\n    return null\n\n  # Run a completed job again as a new job, essentially a manual repeat\n  rerun: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    options.repeats ?= 0\n    options.wait ?= @_doc.repeatWait\n    if @_doc._id?\n      return methodCall @_root, \"jobRerun\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .rerun() on an unsaved job\"\n    return null\n\n  # Remove a job that is not able to run (completed, cancelled, failed) from the queue\n  remove: (options..., cb) ->\n    [options, cb] = optionsHelp options, cb\n    if @_doc._id?\n      return methodCall @_root, \"jobRemove\", [@_doc._id, options], cb\n    else\n      throw new Error \"Can't call .remove() on an unsaved job\"\n    return null\n\n    # Define convenience getters for some document properties\n  Object.defineProperties @prototype,\n    doc:\n      get: () -> @_doc\n      set: () -> console.warn \"Job.doc cannot be directly assigned.\"\n    type:\n      get: () -> @_doc.type\n      set: () -> console.warn \"Job.type cannot be directly assigned.\"\n    data:\n      get: () -> @_doc.data\n      set: () -> console.warn \"Job.data cannot be directly assigned.\"\n\n# Export Job in a npm package\nif module?.exports?\n  module.exports = Job\n","############################################################################\n#     Copyright (C) 2014-2016 by Vaughn Iverson\n#     job-collection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\n_validNumGTEZero = (v) ->\n  Match.test(v, Number) and v >= 0.0\n\n_validNumGTZero = (v) ->\n  Match.test(v, Number) and v > 0.0\n\n_validNumGTEOne = (v) ->\n  Match.test(v, Number) and v >= 1.0\n\n_validIntGTEZero = (v) ->\n  _validNumGTEZero(v) and Math.floor(v) is v\n\n_validIntGTEOne = (v) ->\n  _validNumGTEOne(v) and Math.floor(v) is v\n\n_validStatus = (v) ->\n  Match.test(v, String) and v in Job.jobStatuses\n\n_validLogLevel = (v) ->\n  Match.test(v, String) and v in Job.jobLogLevels\n\n_validRetryBackoff = (v) ->\n  Match.test(v, String) and v in Job.jobRetryBackoffMethods\n\n_validId = (v) ->\n  Match.test(v, Match.OneOf(String, Mongo.Collection.ObjectID))\n\n_validLog = () ->\n  [{\n      time: Date\n      runId: Match.OneOf(Match.Where(_validId), null)\n      level: Match.Where(_validLogLevel)\n      message: String\n      data: Match.Optional Object\n  }]\n\n_validProgress = () ->\n  completed: Match.Where(_validNumGTEZero)\n  total: Match.Where(_validNumGTEZero)\n  percent: Match.Where(_validNumGTEZero)\n\n_validLaterJSObj = () ->\n  schedules: [ Object ]\n  exceptions: Match.Optional [ Object ]\n\n_validJobDoc = () ->\n  _id: Match.Optional Match.OneOf(Match.Where(_validId), null)\n  runId: Match.OneOf(Match.Where(_validId), null)\n  type: String\n  status: Match.Where _validStatus\n  data: Object\n  result: Match.Optional Object\n  failures: Match.Optional [ Object ]\n  priority: Match.Integer\n  depends: [ Match.Where(_validId) ]\n  resolved: [ Match.Where(_validId) ]\n  after: Date\n  updated: Date\n  workTimeout: Match.Optional Match.Where(_validIntGTEOne)\n  expiresAfter: Match.Optional Date\n  log: Match.Optional _validLog()\n  progress: _validProgress()\n  retries: Match.Where _validIntGTEZero\n  retried: Match.Where _validIntGTEZero\n  repeatRetries: Match.Optional Match.Where _validIntGTEZero\n  retryUntil: Date\n  retryWait: Match.Where _validIntGTEZero\n  retryBackoff: Match.Where _validRetryBackoff\n  repeats: Match.Where _validIntGTEZero\n  repeated: Match.Where _validIntGTEZero\n  repeatUntil: Date\n  repeatWait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n  created: Date\n\nclass JobCollectionBase extends Mongo.Collection\n\n  constructor: (@root = 'queue', options = {}) ->\n    unless @ instanceof JobCollectionBase\n      return new JobCollectionBase(@root, options)\n\n    unless @ instanceof Mongo.Collection\n      throw new Error 'The global definition of Mongo.Collection has changed since the job-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before job-collection.'\n\n    unless Mongo.Collection is Mongo.Collection.prototype.constructor\n      throw new Meteor.Error 'The global definition of Mongo.Collection has been patched by another package, and the prototype constructor has been left in an inconsistent state. Please see this link for a workaround: https://github.com/vsivsi/meteor-file-sample-app/issues/2#issuecomment-120780592'\n\n    @later = later  # later object, for convenience\n\n    options.noCollectionSuffix ?= false\n\n    collectionName = @root\n\n    unless options.noCollectionSuffix\n      collectionName += '.jobs'\n\n    # Remove non-standard options before\n    # calling Mongo.Collection constructor\n    delete options.noCollectionSuffix\n\n    Job.setDDP(options.connection, @root)\n\n    @_createLogEntry = (message = '', runId = null, level = 'info', time = new Date(), data = null) ->\n      l = { time: time, runId: runId, message: message, level: level }\n      return l\n\n    @_logMessage =\n      'readied': (() -> @_createLogEntry \"Promoted to ready\").bind(@)\n      'forced': ((id) -> @_createLogEntry \"Dependencies force resolved\", null, 'warning').bind(@)\n      'rerun': ((id, runId) -> @_createLogEntry \"Rerunning job\", null, 'info', new Date(), {previousJob:{id:id,runId:runId}}).bind(@)\n      'running': ((runId) -> @_createLogEntry \"Job Running\", runId).bind(@)\n      'paused': (() -> @_createLogEntry \"Job Paused\").bind(@)\n      'resumed': (() -> @_createLogEntry \"Job Resumed\").bind(@)\n      'cancelled': (() -> @_createLogEntry \"Job Cancelled\", null, 'warning').bind(@)\n      'restarted': (() -> @_createLogEntry \"Job Restarted\").bind(@)\n      'resubmitted': (() -> @_createLogEntry \"Job Resubmitted\").bind(@)\n      'submitted': (() -> @_createLogEntry \"Job Submitted\").bind(@)\n      'completed': ((runId) -> @_createLogEntry \"Job Completed\", runId, 'success').bind(@)\n      'resolved': ((id, runId) -> @_createLogEntry \"Dependency resolved\", null, 'info', new Date(), {dependency:{id:id,runId:runId}}).bind(@)\n      'failed': ((runId, fatal, err) ->\n        value = err.value\n        msg = \"Job Failed with#{if fatal then ' Fatal' else ''} Error#{if value? and typeof value is 'string' then ': ' + value else ''}.\"\n        level = if fatal then 'danger' else 'warning'\n        @_createLogEntry msg, runId, level).bind(@)\n\n    # Call super's constructor\n    super collectionName, options\n\n  _validNumGTEZero: _validNumGTEZero\n  _validNumGTZero: _validNumGTZero\n  _validNumGTEOne: _validNumGTEOne\n  _validIntGTEZero: _validIntGTEZero\n  _validIntGTEOne: _validIntGTEOne\n  _validStatus: _validStatus\n  _validLogLevel: _validLogLevel\n  _validRetryBackoff: _validRetryBackoff\n  _validId: _validId\n  _validLog: _validLog\n  _validProgress: _validProgress\n  _validJobDoc: _validJobDoc\n\n  jobLogLevels: Job.jobLogLevels\n  jobPriorities: Job.jobPriorities\n  jobStatuses: Job.jobStatuses\n  jobStatusCancellable: Job.jobStatusCancellable\n  jobStatusPausable: Job.jobStatusPausable\n  jobStatusRemovable: Job.jobStatusRemovable\n  jobStatusRestartable: Job.jobStatusRestartable\n  forever: Job.forever\n  foreverDate: Job.foreverDate\n\n  ddpMethods: Job.ddpMethods\n  ddpPermissionLevels: Job.ddpPermissionLevels\n  ddpMethodPermissions: Job.ddpMethodPermissions\n\n  processJobs: (params...) -> new Job.processJobs @root, params...\n  getJob: (params...) -> Job.getJob @root, params...\n  getWork: (params...) -> Job.getWork @root, params...\n  getJobs: (params...) -> Job.getJobs @root, params...\n  readyJobs: (params...) -> Job.readyJobs @root, params...\n  cancelJobs: (params...) -> Job.cancelJobs @root, params...\n  pauseJobs: (params...) -> Job.pauseJobs @root, params...\n  resumeJobs: (params...) -> Job.resumeJobs @root, params...\n  restartJobs: (params...) -> Job.restartJobs @root, params...\n  removeJobs: (params...) -> Job.removeJobs @root, params...\n\n  setDDP: (params...) -> Job.setDDP params...\n\n  startJobServer: (params...) -> Job.startJobServer @root, params...\n  shutdownJobServer: (params...) -> Job.shutdownJobServer @root, params...\n\n  # These are deprecated and will be removed\n  startJobs: (params...) -> Job.startJobs @root, params...\n  stopJobs: (params...) -> Job.stopJobs @root, params...\n\n  jobDocPattern: _validJobDoc()\n\n  # Warning Stubs for server-only calls\n  allow: () -> throw new Error \"Server-only function jc.allow() invoked on client.\"\n  deny: () -> throw new Error \"Server-only function jc.deny() invoked on client.\"\n  promote: () -> throw new Error \"Server-only function jc.promote() invoked on client.\"\n  setLogStream: () -> throw new Error \"Server-only function jc.setLogStream() invoked on client.\"\n\n  # Warning Stubs for client-only calls\n  logConsole: () -> throw new Error \"Client-only function jc.logConsole() invoked on server.\"\n\n  # Deprecated. Remove in next major version\n  makeJob: do () ->\n    dep = false\n    (params...) ->\n      unless dep\n        dep = true\n        console.warn \"WARNING: jc.makeJob() has been deprecated. Use new Job(jc, doc) instead.\"\n      new Job @root, params...\n\n  # Deprecated. Remove in next major version\n  createJob: do () ->\n    dep = false\n    (params...) ->\n      unless dep\n        dep = true\n        console.warn \"WARNING: jc.createJob() has been deprecated. Use new Job(jc, type, data) instead.\"\n      new Job @root, params...\n\n  _methodWrapper: (method, func) ->\n    toLog = @_toLog\n    unblockDDPMethods = @_unblockDDPMethods ? false\n    # Return the wrapper function that the Meteor method will actually invoke\n    return (params...) ->\n      user = this.userId ? \"[UNAUTHENTICATED]\"\n      toLog user, method, \"params: \" + JSON.stringify(params)\n      this.unblock() if unblockDDPMethods\n      retval = func(params...)\n      toLog user, method, \"returned: \" + JSON.stringify(retval)\n      return retval\n\n  _generateMethods: () ->\n    methodsOut = {}\n    methodPrefix = '_DDPMethod_'\n    for methodName, methodFunc of @ when methodName[0...methodPrefix.length] is methodPrefix\n      baseMethodName = methodName[methodPrefix.length..]\n      methodsOut[\"#{@root}_#{baseMethodName}\"] = @_methodWrapper(baseMethodName, methodFunc.bind(@))\n    return methodsOut\n\n  _idsOfDeps: (ids, antecedents, dependents, jobStatuses) ->\n    # Cancel the entire tree of antecedents and/or dependents\n    # Dependents: jobs that list one of the ids in their depends list\n    # Antecedents: jobs with an id listed in the depends list of one of the jobs in ids\n    dependsQuery = []\n    if dependents\n      dependsQuery.push\n        depends:\n          $elemMatch:\n            $in: ids\n    if antecedents\n      antsArray = []\n      @find(\n        {\n          _id:\n            $in: ids\n        }\n        {\n          fields:\n            depends: 1\n          transform: null\n        }\n      ).forEach (d) -> antsArray.push(i) for i in d.depends unless i in antsArray\n      if antsArray.length > 0\n        dependsQuery.push\n          _id:\n            $in: antsArray\n    if dependsQuery\n      dependsIds = []\n      @find(\n        {\n          status:\n            $in: jobStatuses\n          $or: dependsQuery\n        }\n        {\n          fields:\n            _id: 1\n          transform: null\n        }\n      ).forEach (d) ->\n        dependsIds.push d._id unless d._id in dependsIds\n    return dependsIds\n\n  _rerun_job: (doc, repeats = doc.repeats - 1, wait = doc.repeatWait, repeatUntil = doc.repeatUntil) ->\n    # Repeat? if so, make a new job from the old one\n    id = doc._id\n    runId = doc.runId\n    time = new Date()\n    delete doc._id\n    delete doc.result\n    delete doc.failures\n    delete doc.expiresAfter\n    delete doc.workTimeout\n    doc.runId = null\n    doc.status = \"waiting\"\n    doc.repeatRetries = if doc.repeatRetries? then doc.repeatRetries else doc.retries + doc.retried\n    doc.retries = doc.repeatRetries\n    doc.retries = @forever if doc.retries > @forever\n    doc.retryUntil = repeatUntil\n    doc.retried = 0\n    doc.repeats = repeats\n    doc.repeats = @forever if doc.repeats > @forever\n    doc.repeatUntil = repeatUntil\n    doc.repeated = doc.repeated + 1\n    doc.updated = time\n    doc.created = time\n    doc.progress =\n      completed: 0\n      total: 1\n      percent: 0\n    if logObj = @_logMessage.rerun id, runId\n      doc.log = [logObj]\n    else\n      doc.log = []\n\n    doc.after = new Date(time.valueOf() + wait)\n    if jobId = @insert doc\n      @_DDPMethod_jobReady jobId\n      return jobId\n    else\n      console.warn \"Job rerun/repeat failed to reschedule!\", id, runId\n    return null\n\n  _DDPMethod_startJobServer: (options) ->\n    check options, Match.Optional {}\n    options ?= {}\n    # The client can't actually do this, so skip it\n    unless @isSimulation\n      Meteor.clearTimeout(@stopped) if @stopped and @stopped isnt true\n      @stopped = false\n    return true\n\n  _DDPMethod_startJobs: do () =>\n    depFlag = false\n    (options) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Deprecation Warning: jc.startJobs() has been renamed to jc.startJobServer()\"\n      return @_DDPMethod_startJobServer options\n\n  _DDPMethod_shutdownJobServer: (options) ->\n    check options, Match.Optional\n      timeout: Match.Optional(Match.Where _validIntGTEOne)\n    options ?= {}\n    options.timeout ?= 60*1000\n\n    # The client can't actually do any of this, so skip it\n    unless @isSimulation\n      Meteor.clearTimeout(@stopped) if @stopped and @stopped isnt true\n      @stopped = Meteor.setTimeout(\n        () =>\n          cursor = @find(\n            {\n              status: 'running'\n            },\n            {\n              transform: null\n            }\n          )\n          failedJobs = cursor.count()\n          console.warn \"Failing #{failedJobs} jobs on queue stop.\" if failedJobs isnt 0\n          cursor.forEach (d) => @_DDPMethod_jobFail d._id, d.runId, \"Running at Job Server shutdown.\"\n          if @logStream? # Shutting down closes the logStream!\n            @logStream.end()\n            @logStream = null\n        options.timeout\n      )\n    return true\n\n  _DDPMethod_stopJobs: do () =>\n    depFlag = false\n    (options) ->\n      unless depFlag\n        depFlag = true\n        console.warn \"Deprecation Warning: jc.stopJobs() has been renamed to jc.shutdownJobServer()\"\n      return @_DDPMethod_shutdownJobServer options\n\n  _DDPMethod_getJob: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      getLog: Match.Optional Boolean\n      getFailures: Match.Optional Boolean\n    options ?= {}\n    options.getLog ?= false\n    options.getFailures ?= false\n    single = false\n    if _validId(ids)\n      ids = [ids]\n      single = true\n    return null if ids.length is 0\n    fields = {_private:0}\n    fields.log = 0 if !options.getLog\n    fields.failures = 0 if !options.getFailures\n    docs = @find(\n      {\n        _id:\n          $in: ids\n      }\n      {\n        fields: fields\n        transform: null\n      }\n    ).fetch()\n    if docs?.length\n      if @scrub?\n        docs = (@scrub d for d in docs)\n      check docs, [_validJobDoc()]\n      if single\n        return docs[0]\n      else\n        return docs\n    return null\n\n  _DDPMethod_getWork: (type, options) ->\n    check type, Match.OneOf String, [ String ]\n    check options, Match.Optional\n      maxJobs: Match.Optional(Match.Where _validIntGTEOne)\n      workTimeout: Match.Optional(Match.Where _validIntGTEOne)\n\n    # Don't simulate getWork!\n    if @isSimulation\n      return\n\n    options ?= {}\n    options.maxJobs ?= 1\n    # Don't put out any more jobs while shutting down\n    if @stopped\n      return []\n\n    # Support string types or arrays of string types\n    if typeof type is 'string'\n      type = [ type ]\n    time = new Date()\n    docs = []\n    runId = @_makeNewID() # This is meteor internal, but it will fail hard if it goes away.\n\n    while docs.length < options.maxJobs\n\n      ids = @find(\n        {\n          type:\n            $in: type\n          status: 'ready'\n          runId: null\n        }\n        {\n          sort:\n            priority: 1\n            retryUntil: 1\n            after: 1\n          limit: options.maxJobs - docs.length # never ask for more than is needed\n          fields:\n            _id: 1\n          transform: null\n        }).map (d) -> d._id\n\n      unless ids?.length > 0\n        break  # Don't keep looping when there's no available work\n\n      mods =\n        $set:\n          status: 'running'\n          runId: runId\n          updated: time\n        $inc:\n          retries: -1\n          retried: 1\n\n      if logObj = @_logMessage.running runId\n        mods.$push =\n          log: logObj\n\n      if options.workTimeout?\n        mods.$set.workTimeout = options.workTimeout\n        mods.$set.expiresAfter = new Date(time.valueOf() + options.workTimeout)\n      else\n        mods.$unset ?= {}\n        mods.$unset.workTimeout = \"\"\n        mods.$unset.expiresAfter = \"\"\n\n      num = @update(\n        {\n          _id:\n            $in: ids\n          status: 'ready'\n          runId: null\n        }\n        mods\n        {\n          multi: true\n        }\n      )\n\n      if num > 0\n        foundDocs = @find(\n          {\n            _id:\n              $in: ids\n            runId: runId\n          }\n          {\n            fields:\n              log: 0\n              failures: 0\n              _private: 0\n            transform: null\n          }\n        ).fetch()\n\n        if foundDocs?.length > 0\n          if @scrub?\n            foundDocs = (@scrub d for d in foundDocs)\n          check docs, [ _validJobDoc() ]\n          docs = docs.concat foundDocs\n        # else\n        #   console.warn \"getWork: find after update failed\"\n    return docs\n\n  _DDPMethod_jobRemove: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    num = @remove(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusRemovable\n      }\n    )\n    if num > 0\n      return true\n    else\n      console.warn \"jobRemove failed\"\n    return false\n\n  _DDPMethod_jobPause: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    mods =\n      $set:\n        status: \"paused\"\n        updated: time\n\n    if logObj = @_logMessage.paused()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusPausable\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    if num > 0\n      return true\n    else\n      console.warn \"jobPause failed\"\n    return false\n\n  _DDPMethod_jobResume: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional {}\n    options ?= {}\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n    mods =\n      $set:\n        status: \"waiting\"\n        updated: time\n\n    if logObj = @_logMessage.resumed()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status: \"paused\"\n        updated:\n          $ne: time\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    if num > 0\n      @_DDPMethod_jobReady ids\n      return true\n    else\n      console.warn \"jobResume failed\"\n    return false\n\n  _DDPMethod_jobReady: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      force: Match.Optional Boolean\n      time: Match.Optional Date\n\n    # Don't simulate jobReady. It has a strong chance of causing issues with\n    # Meteor on the client, particularly if an observeChanges() is triggering\n    # a processJobs queue (which in turn sets timers.)\n    if @isSimulation\n      return\n\n    now = new Date()\n\n    options ?= {}\n    options.force ?= false\n    options.time ?= now\n\n    if _validId(ids)\n      ids = [ids]\n\n    query =\n      status: \"waiting\"\n      after:\n        $lte: options.time\n\n    mods =\n      $set:\n        status: \"ready\"\n        updated: now\n\n    if ids.length > 0\n      query._id =\n        $in: ids\n      mods.$set.after = now\n\n    logObj = []\n\n    if options.force\n      mods.$set.depends = []  # Don't move to resolved, because they weren't!\n      l = @_logMessage.forced()\n      logObj.push l if l\n    else\n      query.depends =\n        $size: 0\n\n    l = @_logMessage.readied()\n    logObj.push l if l\n\n    if logObj.length > 0\n      mods.$push =\n        log:\n          $each: logObj\n\n    num = @update(\n      query\n      mods\n      {\n        multi: true\n      }\n    )\n\n    if num > 0\n      return true\n    else\n      return false\n\n  _DDPMethod_jobCancel: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      antecedents: Match.Optional Boolean\n      dependents: Match.Optional Boolean\n    options ?= {}\n    options.antecedents ?= false\n    options.dependents ?= true\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    mods =\n      $set:\n        status: \"cancelled\"\n        runId: null\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n\n    if logObj = @_logMessage.cancelled()\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id:\n          $in: ids\n        status:\n          $in: @jobStatusCancellable\n      }\n      mods\n      {\n        multi: true\n      }\n    )\n    # Cancel the entire tree of dependents\n    cancelIds = @_idsOfDeps ids, options.antecedents, options.dependents, @jobStatusCancellable\n\n    depsCancelled = false\n    if cancelIds.length > 0\n      depsCancelled = @_DDPMethod_jobCancel cancelIds, options\n\n    if num > 0 or depsCancelled\n      return true\n    else\n      console.warn \"jobCancel failed\"\n    return false\n\n  _DDPMethod_jobRestart: (ids, options) ->\n    check ids, Match.OneOf(Match.Where(_validId), [ Match.Where(_validId) ])\n    check options, Match.Optional\n      retries: Match.Optional(Match.Where _validIntGTEZero)\n      until: Match.Optional Date\n      antecedents: Match.Optional Boolean\n      dependents: Match.Optional Boolean\n    options ?= {}\n    options.retries ?= 1\n    options.retries = @forever if options.retries > @forever\n    options.dependents ?= false\n    options.antecedents ?= true\n    if _validId(ids)\n      ids = [ids]\n    return false if ids.length is 0\n    time = new Date()\n\n    query =\n      _id:\n        $in: ids\n      status:\n        $in: @jobStatusRestartable\n\n    mods =\n      $set:\n        status: \"waiting\"\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n      $inc:\n        retries: options.retries\n\n    if logObj = @_logMessage.restarted()\n      mods.$push =\n        log: logObj\n\n    if options.until?\n      mods.$set.retryUntil = options.until\n\n    num = @update query, mods, {multi: true}\n\n    # Restart the entire tree of dependents\n    restartIds = @_idsOfDeps ids, options.antecedents, options.dependents, @jobStatusRestartable\n\n    depsRestarted = false\n    if restartIds.length > 0\n      depsRestarted = @_DDPMethod_jobRestart restartIds, options\n\n    if num > 0 or depsRestarted\n      @_DDPMethod_jobReady ids\n      return true\n    else\n      console.warn \"jobRestart failed\"\n    return false\n\n  # Job creator methods\n\n  _DDPMethod_jobSave: (doc, options) ->\n    check doc, _validJobDoc()\n    check options, Match.Optional\n      cancelRepeats: Match.Optional Boolean\n    check doc.status, Match.Where (v) ->\n      Match.test(v, String) and v in [ 'waiting', 'paused' ]\n    options ?= {}\n    options.cancelRepeats ?= false\n    doc.repeats = @forever if doc.repeats > @forever\n    doc.retries = @forever if doc.retries > @forever\n\n    time = new Date()\n\n    # This enables the default case of \"run immediately\" to\n    # not be impacted by a client's clock\n    doc.after = time if doc.after < time\n    doc.retryUntil = time if doc.retryUntil < time\n    doc.repeatUntil = time if doc.repeatUntil < time\n\n    # If doc.repeatWait is a later.js object, then don't run before\n    # the first valid scheduled time that occurs after doc.after\n    if @later? and typeof doc.repeatWait isnt 'number'\n      unless next = @later?.schedule(doc.repeatWait).next(1, doc.after)\n        console.warn \"No valid available later.js times in schedule after #{doc.after}\"\n        return null\n      nextDate = new Date(next)\n      unless nextDate <= doc.repeatUntil\n        console.warn \"No valid available later.js times in schedule before #{doc.repeatUntil}\"\n        return null\n      doc.after = nextDate\n    else if not @later? and doc.repeatWait isnt 'number'\n      console.warn \"Later.js not loaded...\"\n      return null\n\n    if doc._id\n\n      mods =\n        $set:\n          status: 'waiting'\n          data: doc.data\n          retries: doc.retries\n          repeatRetries: if doc.repeatRetries? then doc.repeatRetries else doc.retries + doc.retried\n          retryUntil: doc.retryUntil\n          retryWait: doc.retryWait\n          retryBackoff: doc.retryBackoff\n          repeats: doc.repeats\n          repeatUntil: doc.repeatUntil\n          repeatWait: doc.repeatWait\n          depends: doc.depends\n          priority: doc.priority\n          after: doc.after\n          updated: time\n\n      if logObj = @_logMessage.resubmitted()\n        mods.$push =\n          log: logObj\n\n      num = @update(\n        {\n          _id: doc._id\n          status: 'paused'\n          runId: null\n        }\n        mods\n      )\n\n      if num\n        @_DDPMethod_jobReady doc._id\n        return doc._id\n      else\n        return null\n    else\n      if doc.repeats is @forever and options.cancelRepeats\n        # If this is unlimited repeating job, then cancel any existing jobs of the same type\n        @find(\n          {\n            type: doc.type\n            status:\n              $in: @jobStatusCancellable\n          },\n          {\n            transform: null\n          }\n        ).forEach (d) => @_DDPMethod_jobCancel d._id, {}\n      doc.created = time\n      doc.log.push @_logMessage.submitted()\n      newId = @insert doc\n      @_DDPMethod_jobReady newId\n      return newId\n\n  # Worker methods\n\n  _DDPMethod_jobProgress: (id, runId, completed, total, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check completed, Match.Where _validNumGTEZero\n    check total, Match.Where _validNumGTZero\n    check options, Match.Optional {}\n    options ?= {}\n\n    # Notify the worker to stop running if we are shutting down\n    if @stopped\n      return null\n\n    progress =\n      completed: completed\n      total: total\n      percent: 100*completed/total\n\n    check progress, Match.Where (v) ->\n      v.total >= v.completed and 0 <= v.percent <= 100\n\n    time = new Date()\n\n    job = @findOne { _id: id }, { fields: { workTimeout: 1 } }\n\n    mods =\n      $set:\n        progress: progress\n        updated: time\n\n    if job?.workTimeout?\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout)\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n\n    if num is 1\n      return true\n    else\n      console.warn \"jobProgress failed\"\n    return false\n\n  _DDPMethod_jobLog: (id, runId, message, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.OneOf(Match.Where(_validId), null)\n    check message, String\n    check options, Match.Optional\n      level: Match.Optional(Match.Where _validLogLevel)\n      data: Match.Optional Object\n    options ?= {}\n    time = new Date()\n    logObj =\n        time: time\n        runId: runId\n        level: options.level ? 'info'\n        message: message\n    logObj.data = options.data if options.data?\n\n    job = @findOne { _id: id }, { fields: { status: 1, workTimeout: 1 } }\n\n    mods =\n      $push:\n        log: logObj\n      $set:\n        updated: time\n\n    if job?.workTimeout? and job.status is 'running'\n      mods.$set.expiresAfter = new Date(time.valueOf() + job.workTimeout)\n\n    num = @update(\n      {\n        _id: id\n      }\n      mods\n    )\n    if num is 1\n      return true\n    else\n      console.warn \"jobLog failed\"\n    return false\n\n  _DDPMethod_jobRerun: (id, options) ->\n    check id, Match.Where(_validId)\n    check options, Match.Optional\n      repeats: Match.Optional(Match.Where _validIntGTEZero)\n      until: Match.Optional Date\n      wait: Match.OneOf(Match.Where(_validIntGTEZero), Match.Where(_validLaterJSObj))\n\n    doc = @findOne(\n      {\n        _id: id\n        status: \"completed\"\n      }\n      {\n        fields:\n          result: 0\n          failures: 0\n          log: 0\n          progress: 0\n          updated: 0\n          after: 0\n          status: 0\n        transform: null\n      }\n    )\n\n    if doc?\n      options ?= {}\n      options.repeats ?= 0\n      options.repeats = @forever if options.repeats > @forever\n      options.until ?= doc.repeatUntil\n      options.wait ?= 0\n      return @_rerun_job doc, options.repeats, options.wait, options.until\n\n    return false\n\n  _DDPMethod_jobDone: (id, runId, result, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check result, Object\n    check options, Match.Optional\n      repeatId: Match.Optional Boolean\n      delayDeps: Match.Optional(Match.Where(_validIntGTEZero))\n\n    options ?= { repeatId: false }\n    time = new Date()\n    doc = @findOne(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      {\n        fields:\n          log: 0\n          failures: 0\n          progress: 0\n          updated: 0\n          after: 0\n          status: 0\n        transform: null\n      }\n    )\n    unless doc?\n      unless @isSimulation\n        console.warn \"Running job not found\", id, runId\n      return false\n\n    mods =\n      $set:\n        status: \"completed\"\n        result: result\n        progress:\n          completed: 1\n          total: 1\n          percent: 100\n        updated: time\n\n    if logObj = @_logMessage.completed runId\n      mods.$push =\n        log: logObj\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n    if num is 1\n      if doc.repeats > 0\n        if typeof doc.repeatWait is 'number'\n          if doc.repeatUntil - doc.repeatWait >= time\n            jobId = @_rerun_job doc\n        else\n          # This code prevents a job that just ran and finished\n          # instantly from being immediately rerun on the same occurance\n          next = @later?.schedule(doc.repeatWait).next(2)\n          if next and next.length > 0\n            d = new Date(next[0])\n            if (d - time > 500) or (next.length > 1)\n              if d - time <= 500\n                d = new Date(next[1])\n              else\n              wait = d - time\n              if doc.repeatUntil - wait >= time\n                jobId = @_rerun_job doc, doc.repeats - 1, wait\n\n      # Resolve depends\n      ids = @find(\n        {\n          depends:\n            $all: [ id ]\n        },\n        {\n          transform: null\n          fields:\n            _id: 1\n        }\n      ).fetch().map (d) => d._id\n\n      if ids.length > 0\n\n        mods =\n          $pull:\n            depends: id\n          $push:\n            resolved: id\n\n        if options.delayDeps?\n          after = new Date(time.valueOf() + options.delayDeps)\n          mods.$max =\n            after: after\n\n        if logObj = @_logMessage.resolved id, runId\n          mods.$push.log = logObj\n\n        n = @update(\n          {\n            _id:\n              $in: ids\n          }\n          mods\n          {\n            multi: true\n          }\n        )\n        if n isnt ids.length\n          console.warn \"Not all dependent jobs were resolved #{ids.length} > #{n}\"\n        # Try to promote any jobs that just had a dependency resolved\n        @_DDPMethod_jobReady ids\n      if options.repeatId and jobId?\n        return jobId\n      else\n        return true\n    else\n      console.warn \"jobDone failed\"\n    return false\n\n  _DDPMethod_jobFail: (id, runId, err, options) ->\n    check id, Match.Where(_validId)\n    check runId, Match.Where(_validId)\n    check err, Object\n    check options, Match.Optional\n      fatal: Match.Optional Boolean\n\n    options ?= {}\n    options.fatal ?= false\n\n    time = new Date()\n    doc = @findOne(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      {\n        fields:\n          log: 0\n          failures: 0\n          progress: 0\n          updated: 0\n          after: 0\n          runId: 0\n          status: 0\n        transform: null\n      }\n    )\n    unless doc?\n      unless @isSimulation\n        console.warn \"Running job not found\", id, runId\n      return false\n\n    after = switch doc.retryBackoff\n      when 'exponential'\n        new Date(time.valueOf() + doc.retryWait*Math.pow(2, doc.retried-1))\n      else\n        new Date(time.valueOf() + doc.retryWait)  # 'constant'\n\n    newStatus = if (not options.fatal and\n                    doc.retries > 0 and\n                    doc.retryUntil >= after) then \"waiting\" else \"failed\"\n\n    err.runId = runId  # Link each failure to the run that generated it.\n\n    mods =\n      $set:\n        status: newStatus\n        runId: null\n        after: after\n        progress:\n          completed: 0\n          total: 1\n          percent: 0\n        updated: time\n      $push:\n        failures:\n          err\n\n    if logObj = @_logMessage.failed runId, newStatus is 'failed', err\n      mods.$push.log = logObj\n\n    num = @update(\n      {\n        _id: id\n        runId: runId\n        status: \"running\"\n      }\n      mods\n    )\n    if newStatus is \"failed\" and num is 1\n      # Cancel any dependent jobs too\n      @find(\n        {\n          depends:\n            $all: [ id ]\n        },\n        {\n          transform: null\n        }\n      ).forEach (d) => @_DDPMethod_jobCancel d._id\n    if num is 1\n      return true\n    else\n      console.warn \"jobFail failed\"\n    return false\n\n# Share these methods so they'll be available on server and client\n\nshare.JobCollectionBase = JobCollectionBase\n","############################################################################\n#     Copyright (C) 2014-2016 by Vaughn Iverson\n#     job-collection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n  eventEmitter = Npm.require('events').EventEmitter\n\n  userHelper = (user, connection) ->\n    ret = user ? \"[UNAUTHENTICATED]\"\n    unless connection\n      ret = \"[SERVER]\"\n    ret\n\n  ################################################################\n  ## job-collection server class\n\n  class JobCollection extends share.JobCollectionBase\n\n    constructor: (root = 'queue', options = {}) ->\n      unless @ instanceof JobCollection\n        return new JobCollection(root, options)\n\n      # Call super's constructor\n      super root, options\n\n      @events = new eventEmitter()\n\n      @_errorListener = @events.on 'error', @_onError\n\n      # Add events for all individual successful DDP methods\n      @_methodErrorDispatch = @events.on 'error', (msg) =>\n        @events.emit msg.method, msg\n\n      @_callListener = @events.on 'call', @_onCall\n\n      # Add events for all individual successful DDP methods\n      @_methodEventDispatch = @events.on 'call', (msg) =>\n        @events.emit msg.method, msg\n\n      @stopped = true\n\n      # No client mutators allowed\n      share.JobCollectionBase.__super__.deny.bind(@)\n        update: () => true\n        insert: () => true\n        remove: () => true\n\n      @promote()\n\n      @logStream = null\n\n      @allows = {}\n      @denys = {}\n\n      # Initialize allow/deny lists for permission levels and ddp methods\n      for level in @ddpPermissionLevels.concat @ddpMethods\n        @allows[level] = []\n        @denys[level] = []\n\n      # If a connection option is given, then this JobCollection is actually hosted\n      # remotely, so don't establish local and remotely callable server methods in that case\n      unless options.connection?\n        # Default indexes, only when not remotely connected!\n        @_ensureIndex { type : 1, status : 1 }\n        @_ensureIndex { priority : 1, retryUntil : 1, after : 1 }\n        @isSimulation = false\n        localMethods = @_generateMethods()\n        @_localServerMethods ?= {}\n        @_localServerMethods[methodName] = methodFunction for methodName, methodFunction of localMethods\n        foo = this\n        @_ddp_apply = (name, params, cb) =>\n          if cb?\n            Meteor.setTimeout (() =>\n              err = null\n              res = null\n              try\n                res = @_localServerMethods[name].apply(this, params)\n              catch e\n                err = e\n              cb err, res), 0\n          else\n            @_localServerMethods[name].apply(this, params)\n\n        Job._setDDPApply @_ddp_apply, root\n\n        Meteor.methods localMethods\n\n    _onError: (msg) =>\n      user = userHelper msg.userId, msg.connection\n      @_toLog user, msg.method, \"#{msg.error}\"\n\n    _onCall: (msg) =>\n      user = userHelper msg.userId, msg.connection\n      @_toLog user, msg.method, \"params: \" + JSON.stringify(msg.params)\n      @_toLog user, msg.method, \"returned: \" + JSON.stringify(msg.returnVal)\n\n    _toLog: (userId, method, message) =>\n      @logStream?.write \"#{new Date()}, #{userId}, #{method}, #{message}\\n\"\n      # process.stdout.write \"#{new Date()}, #{userId}, #{method}, #{message}\\n\"\n\n    _emit: (method, connection, userId, err, ret, params...) =>\n      if err\n        @events.emit 'error',\n          error: err\n          method: method\n          connection: connection\n          userId: userId\n          params: params\n          returnVal: null\n      else\n        @events.emit 'call',\n          error: null\n          method: method\n          connection: connection\n          userId: userId\n          params: params\n          returnVal: ret\n\n    _methodWrapper: (method, func) ->\n      self = this\n      myTypeof = (val) ->\n        type = typeof val\n        type = 'array' if type is 'object' and type instanceof Array\n        return type\n      permitted = (userId, params) =>\n        performTest = (tests) =>\n          result = false\n          for test in tests when result is false\n            result = result or switch myTypeof(test)\n              when 'array' then userId in test\n              when 'function' then test(userId, method, params)\n              else false\n          return result\n        performAllTests = (allTests) =>\n          result = false\n          for t in @ddpMethodPermissions[method] when result is false\n            result = result or performTest(allTests[t])\n          return result\n        return not performAllTests(@denys) and performAllTests(@allows)\n      # Return the wrapper function that the Meteor method will actually invoke\n      return (params...) ->\n        try\n          unless this.connection and not permitted(this.userId, params)\n            retval = func(params...)\n          else\n            err = new Meteor.Error 403, \"Method not authorized\", \"Authenticated user is not permitted to invoke this method.\"\n            throw err\n        catch err\n          self._emit method, this.connection, this.userId, err\n          throw err\n        self._emit method, this.connection, this.userId, null, retval, params...\n        return retval\n\n    setLogStream: (writeStream = null) ->\n      if @logStream\n        throw new Error \"logStream may only be set once per job-collection startup/shutdown cycle\"\n      @logStream = writeStream\n      unless not @logStream? or\n             @logStream.write? and\n             typeof @logStream.write is 'function' and\n             @logStream.end? and\n             typeof @logStream.end is 'function'\n        throw new Error \"logStream must be a valid writable node.js Stream\"\n\n    # Register application allow rules\n    allow: (allowOptions) ->\n      @allows[type].push(func) for type, func of allowOptions when type of @allows\n\n    # Register application deny rules\n    deny: (denyOptions) ->\n      @denys[type].push(func) for type, func of denyOptions when type of @denys\n\n    # Hook function to sanitize documents before validating them in getWork() and getJob()\n    scrub: (job) ->\n      job\n\n    promote: (milliseconds = 15*1000) ->\n      if typeof milliseconds is 'number' and milliseconds > 0\n        if @interval\n          Meteor.clearInterval @interval\n        @_promote_jobs()\n        @interval = Meteor.setInterval @_promote_jobs.bind(@), milliseconds\n      else\n        console.warn \"jobCollection.promote: invalid timeout: #{@root}, #{milliseconds}\"\n\n    _promote_jobs: (ids = []) ->\n      if @stopped\n        return\n      # This looks for zombie running jobs and autofails them\n      @find({status: 'running', expiresAfter: { $lt: new Date() }})\n        .forEach (job) =>\n          new Job(@root, job).fail(\"Failed for exceeding worker set workTimeout\");\n      # Change jobs from waiting to ready when their time has come\n      # and dependencies have been satisfied\n      @readyJobs()\n"]}