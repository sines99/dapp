{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed:schema-index/server.js","meteor://ðŸ’»app/packages/aldeed:schema-index/common.js"],"names":["Collection2","module","link","default","v","Meteor","on","collection","ss","ensureIndex","index","name","unique","sparse","startup","_collection","_ensureIndex","background","dropIndex","indexName","_dropIndex","err","propName","version","schema","Object","keys","forEach","fieldName","definition","indexValue","idxFieldName","replace","optional","SimpleSchema","extendOptions","messageBox","messages","en","notUnique"],"mappings":"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","file":"/packages/aldeed_schema-index.js","sourcesContent":["import Collection2 from 'meteor/aldeed:collection2';\nimport { Meteor } from 'meteor/meteor';\n\nimport './common';\n\nCollection2.on('schema.attached', (collection, ss) => {\n  function ensureIndex(index, name, unique, sparse) {\n    Meteor.startup(() => {\n      collection._collection._ensureIndex(index, {\n        background: true,\n        name,\n        unique,\n        sparse,\n      });\n    });\n  }\n\n  function dropIndex(indexName) {\n    Meteor.startup(() => {\n      try {\n        collection._collection._dropIndex(indexName);\n      } catch (err) {\n        // no index with that name, which is what we want\n      }\n    });\n  }\n\n  const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n  // Loop over fields definitions and ensure collection indexes (server side only)\n  const schema = ss[propName]();\n  Object.keys(schema).forEach((fieldName) => {\n    const definition = schema[fieldName];\n    if ('index' in definition || definition.unique === true) {\n      const index = {};\n      // If they specified `unique: true` but not `index`,\n      // we assume `index: 1` to set up the unique index in mongo\n      let indexValue;\n      if ('index' in definition) {\n        indexValue = definition.index;\n        if (indexValue === true) indexValue = 1;\n      } else {\n        indexValue = 1;\n      }\n\n      const indexName = `c2_${fieldName}`;\n      // In the index object, we want object array keys without the \".$\" piece\n      const idxFieldName = fieldName.replace(/\\.\\$\\./g, '.');\n      index[idxFieldName] = indexValue;\n      const unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n      let sparse = definition.sparse || false;\n\n      // If unique and optional, force sparse to prevent errors\n      if (!sparse && unique && definition.optional) sparse = true;\n\n      if (indexValue === false) {\n        dropIndex(indexName);\n      } else {\n        ensureIndex(index, indexName, unique, sparse);\n      }\n    }\n  });\n});\n","// collection2 checks to make sure that simpl-schema package is added\nimport SimpleSchema from 'simpl-schema';\nimport Collection2 from 'meteor/aldeed:collection2';\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\n  'index', // one of Number, String, Boolean\n  'unique', // Boolean\n  'sparse', // Boolean\n]);\n\nCollection2.on('schema.attached', (collection, ss) => {\n  // Define validation error messages\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {\n    ss.messageBox.messages({\n      en: {\n        notUnique: '{{label}} must be unique',\n      },\n    });\n  }\n});\n"]}